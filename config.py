# –§–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ç.–ø.
import logging
import re
from dataclasses import dataclass, field
from datetime import datetime
from logging.handlers import RotatingFileHandler
from pprint import pprint

from aiogram.utils import markdown
from environs import Env

from Bot.utils.utils import get_full_path_logger, Files, escape_md, get_random_wishes

logger = logging.getLogger(f"__main__.{__name__}")
logger.setLevel(logging.DEBUG)

file_formatter = logging.Formatter(
    '[{asctime}] #{levelname:8} {filename}::{lineno}::{funcName} ===> {name} ===> {message}',
    style="{",
    datefmt="%d-%m-%Y %H:%M:%S"
)
file_handler = RotatingFileHandler(
    get_full_path_logger(logger.name, __name__, logger.level),
    maxBytes=5 * 1024 * 1024,
    backupCount=5,
    encoding="utf-8",
)
file_handler.setFormatter(file_formatter)
logger.addHandler(file_handler)


@dataclass
class DatabaseConfig:
    database: str = None
    db_host: str = None
    db_user: str = None
    db_password: str = None


@dataclass
class RePatterns:
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL
    pattern_telegram_username = re.compile(r"(?<=@)[\w.\-]+")
    pattern_telegram_url = re.compile(r"(?<=https://t\.me/)[\w.\-]+")
    # user_status = lambda self, status: re.compile(fr"(?<=/{status})\w+") --- –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—É –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤ –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ user_status
    add_user_status = re.compile(fr"(?<=/add)\w+")
    delete_user_status = re.compile(fr"(?<=/delete)\w+")
    salt = 'ARES_resumeBot'  # TODO —Å–¥–µ–ª–∞—Ç—å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é —Å–æ–ª–∏


    def get_userstatus(self, status):
        return re.compile(fr"(?<=/{status})\w+")


@dataclass
class FilePath:
    env_path: str = f"Bot/config_data/.env"
    base: str = f"Bot/botDataFiles"
    base_path: str = f'Bot/botDataFiles/UsersData'
    info_path: str = f'info'
    ids_path: str = f'ids'
    result_path: str = f'result'
    new_auth_ids_path: str = f'new_auth_users'
    json_path: str = f'json'
    logs = 'logging'
    image_path: str = 'images'
    loggerDRIVER: str = "Bot/botDataFiles/logging/loggerDRIVER.txt"
    zipfile_path: str = f'Bot/botDataFiles/[{datetime.now().strftime("%d_%m_%Y %H.%M")}]_zipfille_path.zip'

    for_creating = (
        f"{base_path}/{info_path}",
        f"{base_path}/{ids_path}",
        f"{base_path}/{new_auth_ids_path}",
    )

    supervisors_info: str = f'{base_path}/{info_path}/supervisors_info.json'
    admins_info: str = f'{base_path}/{info_path}/admins_info.json'
    users_info: str = f'{base_path}/{info_path}/users_info.json'
    other_users_info: str = f'{base_path}/{info_path}/other_users_info.json'  # –•—Ä–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∏–º–∞–ª–∏
    # –∫–æ–≥–¥–∞-–ª–∏–±–æ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç, –Ω–µ –≤–æ—à–µ–¥—à–∏–µ
    #  –≤ supervisors_info,admins_info,users_info

    supervisor_ids: str = f'{base_path}/{ids_path}/supervisors_ids.json'
    admin_ids: str = f'{base_path}/{ids_path}/admins_ids.json'
    user_ids: str = f'{base_path}/{ids_path}/users_ids.json'

    new_auth_users: str = f'{base_path}/{new_auth_ids_path}/new_auth_users.json'
    images: str = f"Bot/config_data/{image_path}/no_username.mp4"

    service_commands = {
        "getLogs": f"{base}/{logs}",
        "getAllResultJSONZip": f"{base}/{result_path}/{json_path}",
        "getLastJSONTest": f'{base}/{result_path}/test/one/test.json',
        "getAllJSONTestZip": f'{base}/{result_path}/test/total',
        "getNewUsers": new_auth_users,
        "getAllUsers": users_info,
        "getAllAdmins": admins_info,
        "getAllSupervisors": supervisors_info,
        "getOtherUsers": other_users_info,
        "getALL": f'{base_path}/{info_path}',
        "clearAllNewAuthUsers": new_auth_users,
        "deleteSupervisors": supervisor_ids,
        "deleteAdmins": admin_ids,
        "deleteUsers": user_ids,
    }


@dataclass
class Texts:
    SUPERVISOR = "supervisor"
    ADMIN = "admin"
    USER = "user"
    # TODO —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä–∏
    start = {

        "auth": (
            'üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É  –Ω–∞ —Ä–µ–∑—é–º–µ —á—Ç–æ –±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üôÇ. üîó',
            # escape_md(get_random_wishes()),)
        ),
        "other": get_random_wishes,
    }

    help = {
        "supervisor": (
            r'üÜò /help —á—Ç–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥;',
            fr'üÜò /helpDEBUG —á—Ç–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ {markdown.bold("–û–¢–õ–ê–î–ö–ò")};',
            r'‚è¨ /addSupervisors –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(-–µ–π) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º Supervisor;',
            r'‚è¨ /addAdmins –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(-–µ–π) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º Admin;',
            r'‚è¨ /addUsers –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(-–µ–π) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º User;',
            f'üóë /delete(Supervisors, Admins, Users) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤ [{markdown.bold("–≤ –†–ê–ó–†–ê–ë–û–¢–ö–ï")}];\n',
            f'‚ö†Ô∏èÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥ /add & /delete: \n \t\t"/addAdmins {markdown.bold(r"https://t.me/Username")}";\n\t\t"/addAdmins {markdown.bold(r"@Username")}";\n\t\t"/deleteAdmins {markdown.bold(r"https://t.me/Username")}";\n\t\t"/deleteAdmins {markdown.bold(r"@Username")}".',
            f"‚ÑπÔ∏è –ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫.",

            f'‚ö†Ô∏è –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {markdown.italic("–¢–û–õ–¨–ö–û")} —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ;',

            f'‚û°Ô∏è –°—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ {markdown.bold("https://")}, {markdown.bold("http://")}',
            f"‚õîÔ∏è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Å—ã–ª–∫–æ–π –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!",
        ),
        "admin": (
            r'üÜò /help —á—Ç–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥;',
            r'‚è¨ /addAdmins –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(-–µ–π) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º Admin;',
            r'‚è¨ /addUsers –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(-–µ–π) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º User;',
            f'üóë /delete(Admins, Users) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤ [{markdown.bold("–≤ –†–ê–ó–†–ê–ë–û–¢–ö–ï")}];\n',
            f'‚ö†Ô∏èÔ∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥ /add & /delete: \n \t\t"/addAdmins {markdown.bold(r"https://t.me/Username")}";\n\t\t"/addAdmins {markdown.bold(r"@Username")}";\n\t\t"/deleteAdmins {markdown.bold(r"https://t.me/Username")}";\n\t\t"/deleteAdmins {markdown.bold(r"@Username")}".',
            f'‚ö†Ô∏è –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {markdown.italic("–¢–û–õ–¨–ö–û")} —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ;',
            f'‚û°Ô∏è –°—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ {markdown.bold("https://")}, {markdown.bold("http://")}',
            f"‚õîÔ∏è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Å—ã–ª–∫–æ–π –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!",
        ),
        "user": (
            r'üÜò /help —á—Ç–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥;',
            f'‚ö†Ô∏è –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {markdown.italic("–¢–û–õ–¨–ö–û")} —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ;',
            f'‚û°Ô∏è –°—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ {markdown.bold("https://")}, {markdown.bold("http://")}',
            f"‚õîÔ∏è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Å—ã–ª–∫–æ–π –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!",
        ),
        "other": (
            r'‚òÑÔ∏è /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è;',
            r'üÜò /help —á—Ç–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥;',
        ),
        "helpDEBUG": (
            fr'‚ù§Ô∏è‚Äçü©π –ö–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ –¥–ª—è {markdown.bold("–û–¢–õ–ê–î–ö–ò")} ‚ù§Ô∏è‚Äçü©π',
            fr'üîß /getLogs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å –ª–æ–≥–∞–º–∏;',
            fr'üîß /getAllResultJSONZip –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ JSON;',
            f'üîß /getLastJSONTest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ JSON —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–Ω–∫–µ—Ç—ã;',
            f'üîß /getAllJSONTestZip –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ JSON —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç;',
            f'üîß /getAllUsers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ JSON —Å–¥–∞–Ω–Ω—ã–º–∏ Users;',
            f'üîß /getAllAdmins –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ JSON —Å–¥–∞–Ω–Ω—ã–º–∏ Admins;',
            f'üîß /getAllSupervisors –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ JSON  —Å–¥–∞–Ω–Ω—ã–º–∏ Supervisors;',
            f'üîß /getALL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö;',
            f'üîß /getNewUsers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é;',
            f'üîß /deleteNewAuthUsers –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –µ—â–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é) [{markdown.bold("–≤ –†–ê–ó–†–ê–ë–û–¢–ö–ï")}];',
            f'üîß /clearAllNewAuthUsers –¥–ª—è ‚ö†Ô∏è {markdown.bold("—É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞")} ‚ö†Ô∏è JSON —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Ô∏è ‚ö†Ô∏è{markdown.bold("–ë–ï–ó –ù–ê–î–û–ë–ù–û–°–¢–ò –ù–ï –¢–†–û–ì–ê–¢–¨")}‚ö†Ô∏è;\n',
        )
    }

    echo = {
        "auth": (
            'üîó –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º! üîó',
            f"‚õîÔ∏è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ —Å—ã–ª–∫–æ–π –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!",
            f"üí¨ {get_random_wishes()}"
        ),
        "other": (
            'üí™ –î–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π —Å–∏–ª–∞! üí™',
            '‚õîÔ∏è –†–∞–±–æ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ‚õîÔ∏è',
            f"üí¨ {get_random_wishes()}"
        )
    }

    add_admin_auth = (
        # escape_md('üèÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ! üèÅ'),
        escape_md('–î–∞–ª–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ.'),
    )
    add_admin_error = f'–í –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: \n\n "{markdown.bold(r"https://t.me/<Username>")}";\n"{markdown.bold(r"@<Username>")}"'

    instructions_for_new_user = (
        escape_md(
            f"–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. \n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/ARES_resumeBot.\n–î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É START –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n–ü–æ—Å–ª–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."),
    )

    hh_wait_message = escape_md("‚è≥ –û–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞–Ω–∞–≤–µ—Å, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∞–≥–∏—è...üîÆ")
    hh_error_message = r"üö´ –ß—Ç–æ\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ä–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –ú–∞–≥–∞–º\. üîÆ",
    hh_success_message = (escape_md("ü™Ñ –ú–∞–≥–∏—è —Å–≤–µ—Ä—à–∏–ª–∞—Å—å! ‚ú®"),
                          escape_md("üìÑ –í–∞—à –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª üìÑ"),
                          escape_md(f"üìÑ {get_random_wishes()} üìÑ"),
                          )

    success_auth = escape_md(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –¥–æ–±—Ä—ã–π –ø—É—Ç–Ω–∏–∫!\n–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')


@dataclass
class Commands:
    """
    –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    """
    general: tuple = ('start', 'help')
    admins: tuple = ('addAdmins', 'addUsers', 'deleteAdmins',
                     'deleteUsers')  # –ù–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    users: tuple = ('',)  # –ù–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    supervisors: tuple = (
        'addSupervisors', 'addAdmins', 'addUsers',
        'deleteAdmins', 'deleteUsers', 'deleteSupervisors',
        'getLogs', 'getLastJSONTest', 'getAllJSONTestZip', 'getAllUsers',
        'getAllAdmins', 'getAllSupervisors', 'getALL', 'getNewUsers', 'clearAllNewAuthUsers'
    )  # –ù–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥


@dataclass
class TgBot:
    token: str  # –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É
    supervisor_ids: set[int]  # –°–ø–∏—Å–æ–∫ id —Å—É–ø—Ä–µ–≤–∞–π–∑–µ—Ä–∞–º–∏ –±–æ—Ç–∞
    admin_ids: set[int]  # –°–ø–∏—Å–æ–∫ id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
    user_ids: set[int]  # –°–ø–∏—Å–æ–∫ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞
    statuses: tuple[str] = ("supervisor", "admin", "user")
    texts: Texts = field(default_factory=Texts)
    commands: Commands = field(default_factory=Commands)

    def get_user_status(self, user_id: int, is_check_ids: bool = True, return_only_status: bool = False) -> str:
        """
        –ü–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –æ—Ç –¢–ì id –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ –∏
        –≤—ã–¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ª–∏–±–æ "..._info.json", –ª–∏–±–æ "..._ids.json"
        :param is_check_ids: –µ—Å–ª–∏ True —Ç–æ –≤–µ—Ä–Ω–µ—Ç –ø—É—Ç–∏ –¥–ª—è "..._ids.json" –∏–Ω–∞—á–µ –¥–ª—è "..._info.json"
        :param return_only_status: –µ—Å–ª–∏ True —Ç–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—Ç —é–∑–µ—Ä–∞
        :param user_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """
        if return_only_status:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        else:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        statuses: list[dict] = [
            {
                "status": "supervisor",
                "path": FilePath.supervisor_ids if is_check_ids else FilePath.supervisors_info,
                "ids": self.supervisor_ids
            },
            {
                "status": "admin",
                "path": FilePath.admin_ids if is_check_ids else FilePath.admins_info,
                "ids": self.admin_ids
            },
            {
                "status": "user",
                "path": FilePath.user_ids if is_check_ids else FilePath.users_info,
                "ids": self.user_ids
            }
        ]

        for data in statuses:
            if user_id in data.get("ids"):
                if return_only_status:
                    return data.get("status")
                return data.get("path")

    def update_supervisor_ids(self, ids: list[int]) -> None:
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ids –∫ supervisor_ids
        :param ids:
        :return:
        """
        self.supervisor_ids.update(ids)

    def update_admin_ids(self, ids: list[int]) -> None:
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ids –∫ admin_ids
        :param ids:
        :return:
        """
        self.admin_ids.update(ids)

    def update_users_ids(self, ids: list[int]) -> None:
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ids –∫ users_ids
        :param ids:
        :return:
        """
        self.user_ids.update(ids)

    def update_ids(self) -> None:
        supervisor_ids = Files.read_json(FilePath.supervisor_ids)
        admin_ids = Files.read_json(FilePath.admin_ids)
        user_ids = Files.read_json(FilePath.user_ids)

        if supervisor_ids:
            self.update_supervisor_ids(supervisor_ids.values())
            logger.info(f"IDs Supervisors –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞!")

        if admin_ids:
            self.update_admin_ids(admin_ids.values())
            logger.info(f"IDs –ê–¥–º–∏–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞!")

        if user_ids:
            self.update_users_ids(user_ids.values())
            logger.info(f"IDs –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞!")

    def add_admin(self):
        ...


@dataclass
class HHService:
    hh_username: str
    hh_password: str


@dataclass
class Config:
    tg_bot: TgBot
    hh: HHService
    patterns: RePatterns = field(default_factory=RePatterns)
    filepath: FilePath = field(default_factory=FilePath)
    db: DatabaseConfig = field(default_factory=DatabaseConfig, init=False)


def load_config(env_path) -> Config:
    env: Env = Env()
    env.read_env(env_path)
    logger.info("–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    return Config(
        tg_bot=TgBot(
            token=env('BOT_TOKEN'),
            admin_ids=set(map(int, filter(bool, env.list('ADMIN_IDS')))),
            user_ids=set(map(int, filter(bool, env.list('USER_IDS')))),
            supervisor_ids=set(map(int, filter(bool, env.list('SUPERVISOR_IDS')))),
        ),
        hh=HHService(
            hh_username=env('HH_USERNAME'),
            hh_password=env('HH_PASSWORD'),
        )
        # db=DatabaseConfig(
        #     database=env('DATABASE'),
        #     db_host=env('DB_HOST'),
        #     db_user=env('DB_USER'),
        #     db_password=env('DB_PASSWORD')
        # )
    )
